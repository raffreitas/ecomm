// <auto-generated />
using System;
using Ecomm.Products.WebApi.Shared.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecomm.Products.WebApi.Shared.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711115027_v001")]
    partial class v001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Categories.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("ix_categories_parent_category_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Inventory.Domain.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_inventories");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_inventories_product_id");

                    b.ToTable("inventories", (string)null);
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Products.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsListed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_listed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Shared.Infrastructure.Persistence.Models.OutboxEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_event");

                    b.ToTable("outbox_event", (string)null);
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Shared.Infrastructure.Persistence.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("ProductId", "CategoryId")
                        .HasName("pk_products_categories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_categories_category_id");

                    b.ToTable("products_categories", (string)null);
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Categories.Domain.Category", b =>
                {
                    b.HasOne("Ecomm.Products.WebApi.Features.Categories.Domain.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_categories_parent_category_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Inventory.Domain.Inventory", b =>
                {
                    b.OwnsOne("Ecomm.Products.WebApi.Features.Inventory.Domain.ValueObject.Quantity", "MaximumStockLevel", b1 =>
                        {
                            b1.Property<Guid>("InventoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("maximum_stock_level");

                            b1.HasKey("InventoryId");

                            b1.ToTable("inventories");

                            b1.WithOwner()
                                .HasForeignKey("InventoryId")
                                .HasConstraintName("fk_inventories_inventories_id");
                        });

                    b.OwnsOne("Ecomm.Products.WebApi.Features.Inventory.Domain.ValueObject.Quantity", "MinimumStockLevel", b1 =>
                        {
                            b1.Property<Guid>("InventoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("minimum_stock_level");

                            b1.HasKey("InventoryId");

                            b1.ToTable("inventories");

                            b1.WithOwner()
                                .HasForeignKey("InventoryId")
                                .HasConstraintName("fk_inventories_inventories_id");
                        });

                    b.OwnsOne("Ecomm.Products.WebApi.Features.Inventory.Domain.ValueObject.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("InventoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.HasKey("InventoryId");

                            b1.ToTable("inventories");

                            b1.WithOwner()
                                .HasForeignKey("InventoryId")
                                .HasConstraintName("fk_inventories_inventories_id");
                        });

                    b.OwnsOne("Ecomm.Products.WebApi.Features.Inventory.Domain.ValueObject.Quantity", "ReservedQuantity", b1 =>
                        {
                            b1.Property<Guid>("InventoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("reserved_quantity");

                            b1.HasKey("InventoryId");

                            b1.ToTable("inventories");

                            b1.WithOwner()
                                .HasForeignKey("InventoryId")
                                .HasConstraintName("fk_inventories_inventories_id");
                        });

                    b.Navigation("MaximumStockLevel")
                        .IsRequired();

                    b.Navigation("MinimumStockLevel")
                        .IsRequired();

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("ReservedQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Products.Domain.Product", b =>
                {
                    b.OwnsOne("Ecomm.Products.WebApi.Shared.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("price_currency");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsMany("Ecomm.Products.WebApi.Features.Products.Domain.ValueObject.Image", "Images", b1 =>
                        {
                            b1.Property<Guid>("product_id")
                                .HasColumnType("uuid")
                                .HasColumnName("product_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AltText")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("alt_text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("url");

                            b1.HasKey("product_id", "Id")
                                .HasName("pk_product_images");

                            b1.ToTable("product_images", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("product_id")
                                .HasConstraintName("fk_product_images_products_product_id");
                        });

                    b.Navigation("Images");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Shared.Infrastructure.Persistence.Models.ProductCategory", b =>
                {
                    b.HasOne("Ecomm.Products.WebApi.Features.Categories.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_categories_category_id");

                    b.HasOne("Ecomm.Products.WebApi.Features.Products.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_products_product_id");
                });

            modelBuilder.Entity("Ecomm.Products.WebApi.Features.Categories.Domain.Category", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
